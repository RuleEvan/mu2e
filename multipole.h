#ifndef MULTIPOLE_H
#define MULTIPOLE_H
#include "angular.h"

void compute_nuclear_multipoles();
double m0_tot(double y, double *rho, int num_shells); 
double m1_tot(double y, double *rho, int num_shells); 
double m2_tot(double y, double *rho, int num_shells); 
double m3_tot(double y, double *rho, int num_shells); 
double m4_tot(double y, double *rho, int num_shells); 
double deltap1_tot(double y, double *rho, int num_shells); 
double deltap2_tot(double y, double *rho, int num_shells); 
double deltap3_tot(double y, double *rho, int num_shells); 
double sigma1_tot(double y, double *rho, int num_shells); 
double sigma2_tot(double y, double *rho, int num_shells); 
double sigma3_tot(double y, double *rho, int num_shells); 
double sigma4_tot(double y, double *rho, int num_shells); 
double delta1_tot(double y, double *rho, int num_shells);
double delta2_tot(double y, double *rho, int num_shells);
double delta3_tot(double y, double *rho, int num_shells);
double sigmap1_tot(double y, double *rho, int num_shells);
double sigmap2_tot(double y, double *rho, int num_shells);

int get_shell_index(int in, int ij);
double b_osc(int a_nuc);


double m0_1s1_1s1(double y);
double sigmap1_1s1_1s1(double y);
double sigmapp1_1s1_1s1(double y);
double m1_1p1_1s1(double y);
double deltap1_1p1_1s1(double y);
double sigma1_1p1_1s1(double y);
double m1_1p3_1s1(double y);
double deltap1_1p3_1s1(double y);
double sigma1_1p3_1s1(double y);
double sigmapp0_1p1_1s1(double y);
double omegap0_1p1_1s1(double y);
double sigmap2_1p3_1s1(double y);
double sigmapp2_1p3_1s1(double y);
double m0_1p1_1p1(double y);
double m2_1p3_1p1(double y);
double sigma2_1p3_1p1(double y);
double m0_1p3_1p3(double y);
double m2_1p3_1p3(double y);
double delta1_1p1_1p1(double y);
double sigmap1_1p1_1p1(double y);
double sigmapp1_1p1_1p1(double y);
double delta1_1p3_1p1(double y);
double sigmap1_1p3_1p1(double y);
double sigmapp1_1p3_1p1(double y);
double omegap1_1p3_1p1(double y);
double delta1_1p3_1p3(double y);
double sigmap1_1p3_1p3(double y);
double sigmapp1_1p3_1p3(double y);
double sigmap3_1p3_1p3(double y);
double sigmapp3_1p3_1p3(double y);
double m0_2s1_1s1(double y);
double m2_1d3_1s1(double y);
double deltap2_1d3_1s1(double y);
double sigma2_1d3_1s1(double y);
double m2_1d5_1s1(double y);
double deltap2_1d5_1s1(double y);
double sigma2_1d5_1s1(double y);
double sigmap1_2s1_1s1(double y);
double sigmapp1_2s1_1s1(double y);
double omegap1_2s1_1s1(double y);
double sigmap1_1d3_1s1(double y);
double sigmapp1_1d3_1s1(double y);
double omegap1_1d3_1s1(double y);
double sigmap3_1d5_1s1(double y);
double sigmapp3_1d5_1s1(double y);
double m1_2s1_1p1(double y);
double deltap1_2s1_1p1(double y);
double sigma1_2s1_1p1(double y);
double m1_2s1_1p3(double y);
double deltap1_2s1_1p3(double y);
double sigma1_2s1_1p3(double y);
double m1_1d3_1p1(double y);
double deltap1_1d3_1p1(double y);
double sigma1_1d3_1p1(double y);
double m1_1d3_1p3(double y);
double deltap1_1d3_1p3(double y);
double sigma1_1d3_1p3(double y);
double m3_1d3_1p3(double y);
double deltap3_1d3_1p3(double y);
double sigma3_1d3_1p3(double y);
double m3_1d5_1p1(double y);
double deltap3_1d5_1p1(double y);
double sigma3_1d5_1p1(double y);
double m1_1d5_1p3(double y);
double deltap1_1d5_1p3(double y);
double sigma1_1d5_1p3(double y);
double m3_1d5_1p3(double y);
double deltap3_1d5_1p3(double y);
double sigma3_1d5_1p3(double y);
double sigmapp0_2s1_1p1(double y);
double omegap0_2s1_1p1(double y);
double sigmap2_2s1_1p3(double y);
double sigmapp2_2s1_1p3(double y);
double omegap2_2s1_1p3(double y);
double delta2_1d3_1p1(double y);
double sigmap2_1d3_1p1(double y);
double sigmapp2_1d3_1p1(double y);
double omegap2_1d3_1p1(double y);
double sigmapp0_1d3_1p3(double y);
double omegap0_1d3_1p3(double y);
double delta2_1d3_1p3(double y);
double sigmap2_1d3_1p3(double y);
double sigmapp2_1d3_1p3(double y);
double omegap2_1d3_1p3(double y);
double delta2_1d5_1p1(double y);
double sigmap2_1d5_1p1(double y);
double sigmapp2_1d5_1p1(double y);
double omegap2_1d5_1p1(double y);
double delta2_1d5_1p3(double y);
double sigmap2_1d5_1p3(double y);
double sigmapp2_1d5_1p3(double y);
double sigmap4_1d5_1p3(double y);
double sigmapp4_1d5_1p3(double y);
double m0_2s1_2s1(double y);
double m2_1d3_2s1(double y);
double deltap2_1d3_2s1(double y);
double sigma2_1d3_2s1(double y);
double m0_1d3_1d3(double y);
double m2_1d3_1d3(double y);
double m2_1d5_2s1(double y);
double deltap2_1d5_2s1(double y);
double sigma2_1d5_2s1(double y);
double m2_1d5_1d3(double y);
double sigma2_1d5_1d3(double y);
double m4_1d5_1d3(double y);
double sigma4_1d5_1d3(double y);
double m0_1d5_1d5(double y);
double m2_1d5_1d5(double y);
double m4_1d5_1d5(double y);
double sigmap1_2s1_2s1(double y);
double sigmapp1_2s1_2s1(double y);
double sigmap1_1d3_2s1(double y);
double sigmapp1_1d3_2s1(double y);
double omegap1_1d3_2s1(double y);
double delta1_1d3_1d3(double y);
double sigmap1_1d3_1d3(double y);
double sigmapp1_1d3_1d3(double y);
double delta3_1d3_1d3(double y);
double sigmap3_1d3_1d3(double y);
double sigmapp3_1d3_1d3(double y);
double sigmap3_1d5_2s1(double y);
double sigmapp3_1d5_2s1(double y);
double omegap3_1d5_2s1(double y);
double delta1_1d5_1d3(double y);
double sigmap1_1d5_1d3(double y);
double sigmapp1_1d5_1d3(double y);
double omegap1_1d5_1d3(double y);
double delta3_1d5_1d3(double y);
double sigmap3_1d5_1d3(double y);
double sigmapp3_1d5_1d3(double y);
double omegap3_1d5_1d3(double y);
double delta1_1d5_1d5(double y);
double sigmap1_1d5_1d5(double y);
double sigmapp1_1d5_1d5(double y);
double delta3_1d5_1d5(double y);
double sigmap3_1d5_1d5(double y);
double sigmapp3_1d5_1d5(double y);
double sigmap5_1d5_1d5(double y);
double sigmapp5_1d5_1d5(double y);

#endif
